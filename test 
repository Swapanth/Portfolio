#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
typedef struct Node {
    int key;
    struct Node *left, *right;
    int height;
} Node;

// Function to get the height of a node
int height(Node *node) {
    return node == NULL ? 0 : node->height;
}

// Function to get the balance factor of a node
int getBalance(Node *node) {
    return node == NULL ? 0 : height(node->left) - height(node->right);
}

// Function to create a new node
Node *createNode(int key) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->key = key;
    node->left = node->right = NULL;
    node->height = 1; // New node is initially at height 1
    return node;
}

// Right rotate the subtree rooted at y
Node *rightRotate(Node *y) {
    Node *x = y->left;
    Node *T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right));
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right));

    // Return new root
    return x;
}

// Left rotate the subtree rooted at x
Node *leftRotate(Node *x) {
    Node *y = x->right;
    Node *T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right));
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right));

    // Return new root
    return y;
}

// Insert a key into the AVL tree
Node *insert(Node *node, int key) {
    if (node == NULL)
        return createNode(key);

    // Perform standard BST insertion
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node; // Duplicate keys not allowed

    // Update height of this ancestor node
    node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : height(node->right));

    // Get the balance factor
    int balance = getBalance(node);

    // If the node becomes unbalanced, perform rotations
    if (balance > 1 && key < node->left->key) // Left-Left case
        return rightRotate(node);

    if (balance < -1 && key > node->right->key) // Right-Right case
        return leftRotate(node);

    if (balance > 1 && key > node->left->key) { // Left-Right case
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    if (balance < -1 && key < node->right->key) { // Right-Left case
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node; // Return the unchanged node pointer
}

// Get the node with the smallest value (used in deletion)
Node *minValueNode(Node *node) {
    Node *current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Delete a key from the AVL tree
Node *deleteNode(Node *root, int key) {
    if (root == NULL)
        return root;

    // Perform standard BST deletion
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        // Node with only one child or no child
        if ((root->left == NULL) || (root->right == NULL)) {
            Node *temp = root->left ? root->left : root->right;
            if (temp == NULL) { // No child case
                temp = root;
                root = NULL;
            } else // One child case
                *root = *temp;
            free(temp);
        } else {
            // Node with two children: Get the inorder successor
            Node *temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
    }

    if (root == NULL)
        return root;

    // Update height of the current node
    root->height = 1 + (height(root->left) > height(root->right) ? height(root->left) : height(root->right));

    // Get the balance factor
    int balance = getBalance(root);

    // If the node becomes unbalanced, perform rotations
    if (balance > 1 && getBalance(root->left) >= 0) // Left-Left case
        return rightRotate(root);

    if (balance > 1 && getBalance(root->left) < 0) { // Left-Right case
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    if (balance < -1 && getBalance(root->right) <= 0) // Right-Right case
        return leftRotate(root);

    if (balance < -1 && getBalance(root->right) > 0) { // Right-Left case
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Print the tree in in-order traversal
void inOrder(Node *root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%d ", root->key);
        inOrder(root->right);
    }
}

// Main function
int main() {
    Node *root = NULL;

    // Insert nodes
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    root = insert(root, 25);

    printf("Inorder traversal of the AVL tree:\n");
    inOrder(root);

    // Delete a node
    root = deleteNode(root, 40);
    printf("\n\nInorder traversal after deletion of 40:\n");
    inOrder(root);

    return 0;
}




Inorder traversal of the AVL tree:
10 20 25 30 40 50 

Inorder traversal after deletion of 40:
10 20 25 30 50